{"version":3,"sources":["questions/View.js","questions/resultMapper.js","questions/Chart.js","questions/Results.js","questions/hash.js","questions/questionService.js","questions/index.js","App.js","serviceWorker.js","index.js"],"names":["View","_ref","question","sub","onVote","react_default","a","createElement","className","onClick","DateTime","require","map","votes","votesPerQuestionAndDay","reduce","prev","vote","voteDay","fromISO","date","toFormat","result","count","rating","iterations","Object","keys","questionIndex","forEach","day","index","concat","data","push","x","y","iteration","objectSpread","series","lineChart","es","primary","type","min","max","Line","Results","local","upVotes","downVotes","hasSame","style","fontSize","height","position","questions_Chart","hash","params","window","location","length","substring","split","previous","keyValue","parts","getHash","checkStatus","response","status","error","Error","statusText","console","log","parseJSON","json","Index","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","survey","startDate","questions","hasVoted","voted","_this2","fetch","headers","Accept","then","setState","getQuestionOfTheDay","getVotes","_this3","_ref2","voteId","method","Content-Type","x-vote-id","body","JSON","stringify","voteFor","Date","catch","err","_this4","inner","questions_Results","questions_View","assign","Component","App","questions_Index","href","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e87a446.chunk.js","sourcesContent":["import React from 'react';\n\nconst View = ({ question, sub, onVote }) => {\n    return <div>\n        <h1 className=\"splash-head\">{question}</h1>\n        <p className=\"splash-subhead\">\n            {sub ? sub : \"\"}\n        </p>\n        <p>\n            <button onClick={() => onVote(1)}\n                className=\"pure-button pure-button-primary\">\n                Yes</button>\n            <button onClick={() => onVote(-1)}\n                className=\"pure-button pure-button-primary\">\n                No</button>\n        </p>\n    </div>\n};\nexport default View;","\nconst { DateTime } = require('luxon');\n\nconst map = (votes) => {\n    const votesPerQuestionAndDay = votes.reduce((prev, vote) => {\n        const voteDay = DateTime.fromISO(vote.date).toFormat('yyyyMMdd');\n        prev[vote.question] = prev[vote.question] || {};\n        prev[vote.question][voteDay] = prev[vote.question][voteDay] || { result : 0, count : 0 };\n        prev[vote.question][voteDay].result = (prev[vote.question][voteDay].result || 0) + vote.rating;\n        prev[vote.question][voteDay].count++;\n        return prev;\n    }, {});\n\n    const iterations = Object.keys(votesPerQuestionAndDay).reduce((result, question, questionIndex) => {\n        Object.keys(votesPerQuestionAndDay[question]).forEach((day, index) => {\n            result[`Iteration ${index}`] = result[`Iteration ${index}`] || {data : []};\n            result[`Iteration ${index}`].data.push({\n                x : question,\n                y : votesPerQuestionAndDay[question][day].result / votesPerQuestionAndDay[question][day].count\n            })\n        })\n        return result;\n    }, {});\n\n    return Object.keys(iterations).map(iteration => ({...iterations[iteration], series: iteration}))\n};\n\nexport default map;","import React from \"react\";\nimport { Chart, Axis, Series, Tooltip, Cursor, Line } from \"react-charts\";\nimport './Chart.css';\n\n/**\n * \n * @param {data, axisX} param0 \n * @example \n *  [\n      {\n        label: \"Series 1\",\n        data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\n      },\n      {\n        label: \"Series 2\",\n        data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\n      }\n    ]\n */\nconst lineChart = ({data}) => (\n  <Chart data={data}>\n    <Axis primary type=\"ordinal\"  />\n    <Axis type=\"linear\" min={-1} max={1} />\n    <Series type={Line} />\n    <Tooltip />\n    <Cursor />\n  </Chart>\n);\n\nexport default lineChart;","import React from 'react';\nimport map from './resultMapper';\nimport Chart from './Chart';\nconst { DateTime } = require('luxon');\n\nconst Results = ({ question, votes }) => {\n    const date = DateTime.local();\n    let upVotes = 0, downVotes = 0;\n    const data = map(votes);\n    votes.reduce((prev, vote) => {\n        if (!date.hasSame(DateTime.fromISO(vote.date), 'day')) return prev;\n        if (vote.rating > 0) { upVotes++; } else { downVotes++ };\n        return (prev + vote.rating);\n    }, 0);\n\n    return <div>\n    <p className=\"splash-subhead\">\n        {question}\n            <div style={{ fontSize: 'small' }}>Up {upVotes} | Down {downVotes}</div>\n    </p>\n        <h1 className=\"splash-head\">\n            <div style={{ fontSize: 'small' }}>Results</div>\n            <div style={{ height: 600, position: 'relative' }}><Chart data={data} /></div>\n        </h1>\n    </div>;\n}\n\nexport default Results;","function getHash() {\n    let params = {};\n    let { hash } = window.location;\n    if (!hash || hash.length < 1) return params;\n    return hash.substring(1).split('&').reduce((previous, keyValue) => {\n        const parts = keyValue.split('=');\n        if (parts.length === 1) {\n            previous[parts[0]] = true;\n        } else if (parts.length === 2) {\n            previous[parts[0]] = parts[1];\n        }\n        return previous;\n    }, params);\n}\n\nconst hash = getHash();\nexport { hash };","import { hash } from './hash';\nconst { DateTime } = require('luxon');\n\nexport function getQuestionOfTheDay(name) {\n    return fetch(`/api/${name}/question/now`, {\n        headers: {\n            'Accept': 'application/json'\n        }\n    })\n        .then(checkStatus)\n        .then(parseJSON);\n}\n\n\nexport function getLocalQuestionOfTheDay({ \n    questions, \n    forDate, \n    day = DateTime.local().toJSDate() \n}) {\n    if (!day) day = DateTime.local().toJSDate() ;\n    if (questions.length < 1) return { question: \"\" };\n    const start = DateTime.fromISO(forDate);\n    const maxQuestions = questions.length;\n    const end = DateTime.fromISO(day);\n    const { days } = end.diff(start, 'days').toObject();\n    let index = 0;\n    for (let day = 0; day < days; day++) {\n        const { weekday } = start.plus({ days: day });\n        if (weekday !== 6 && weekday !== 7) {\n            index++;\n        }\n\n        if (index >= maxQuestions) {\n            index = 0;\n        }\n    }\n\n    return (questions.length > index)\n        ? questions[index]\n        : { question: \"\" };\n}\n\nexport function getSurvey(name) {\n    return fetch(`/api/${name}`, {\n        headers: {\n            'Accept': 'application/json'\n        }\n    })\n        .then(checkStatus)\n        .then(parseJSON);\n}\n\nexport function getVotes(name) {\n    return fetch(`/api/${name}/votes`, {\n        headers: {\n            'Accept': 'application/json'\n        }\n    })\n        .then(checkStatus)\n        .then(parseJSON);\n}\n\nexport function voteFor({ name, date, rating }) {\n    let { voteId } = hash;\n    return fetch(`/api/${name}/votes`, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'x-vote-id': voteId\n        },\n        body: JSON.stringify({ date, rating })\n    })\n        .then(checkStatus)\n        .then(parseJSON);\n}\n\nfunction checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    }\n    const error = new Error(`HTTP Error ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = response;\n    console.log(error); // eslint-disable-line no-console\n    throw error;\n}\n\nfunction parseJSON(response) {\n    return response.json();\n}","import React, { Component } from 'react';\nimport View from './View';\nimport Results from './Results';\nimport {voteFor, getSurvey, getVotes, getQuestionOfTheDay} from './questionService';\nimport {hash} from './hash';\n\nexport default class Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name : hash.survey || \"example\",\n            startDate: \"\",\n            questions: [],\n            question : \"\",\n            hasVoted: hash.voted || false,\n            votes : []\n        }\n    }\n\n    componentDidMount() {\n        getSurvey(this.state.name)\n            .then(response => {\n                this.setState({ ...response.survey })\n            })\n        getQuestionOfTheDay(this.state.name)\n            .then(response => {\n                this.setState({ question : response.question });\n            })\n        if (this.state.hasVoted) {\n            getVotes(this.state.name)\n                .then(({ votes }) => {\n                    this.setState({votes});\n                });\n        }\n    }\n\n    onVote(rating) {\n        voteFor({ name: this.state.name, date : new Date(), rating })\n            .then((result) => \n                this.setState({ \n                    hasVoted : true, \n                    votes: result.votes \n                })\n            ).catch(err => {\n                console.log(err);\n            });\n    }\n\n    render() {\n        const inner = this.state.questions.length < 1\n        ?  <h1 className=\"splash-head\">loading...</h1> : !this.state.hasVoted \n            ? <View {...this.state} onVote={(rating) => this.onVote(rating)} />\n            : <Results {...this.state} />\n        return (<div className=\"splash-container\">\n            <div className=\"splash\">\n                {inner}\n            </div>\n        </div>);\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './questions';\nimport { hash } from './questions/hash';\n\nclass App extends Component {\n  render() {\n    const body = hash.survey\n      ? <Question />\n      : <div className=\"splash-container\">\n        <div className=\"splash\">\n          <h1 className=\"splash-head\">Welcome! Please open your voting directly to continue.</h1>\n        </div>\n      </div>;\n    return (\n      <div className=\"App\">\n\n        <div className=\"header\">\n          <div className=\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed\">\n            <a className=\"pure-menu-heading\" href=\"/\">Daily Question</a>\n          </div>\n        </div>\n\n        {body}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}